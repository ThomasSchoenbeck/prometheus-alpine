apiVersion: template.openshift.io/v1
kind: Template
metadata:
  annotations:
    description: >-
      Python powered Backend. For more information about using this template,
      see https://***/frankfurt-webworker/tools/prometheus.


      NOTE: Scaling to more than one replica is supported.

    iconClass: pficon-virtual-machine
    openshift.io/display-name: prometheus
    openshift.io/documentation-url: 'https://***/frankfurt-webworker/tools/prometheus/blob/master/README.md'
    openshift.io/long-description: >-
      
    openshift.io/provider-display-name: '***'
    # openshift.io/support-url: 'https://access.redhat.com'
    tags: 'backend,python'



  name: frankfurt-webworker--tools--prometheus-alpine--all-components--template
  labels:
    gitlab-group: frankfurt-webworker
    gitlab-sub-group_1: tools
    gitlab-project-name: prometheus-alpine
    gitlab-project-id: "17633"
    app: prometheus

###################################################
# labels for all objects
labels:
  gitlab-group: frankfurt-webworker
  gitlab-sub-group_1: tools
  gitlab-project-name: prometheus-alpine
  gitlab-project-id: "17633"
  app: prometheus


parameters:
  - description: >-
      this will be used to set names for Objects as well as labels
    displayName: Application Name
    name: APP_NAME
    value: prometheus
    required: true
  - description: >-
      this is used for references to image streams
    displayName: Project Namespace
    name: NAMESPACE
    value: ai-team-germany-nlp
    required: true
  - description: >-
      a reference to the app source code
    displayName: Source Code Repo
    name: SOURCE_CODE_REPOSITORY
    value: https://***/frankfurt-webworker/tools/prometheus-alpine.git
    required: true
  - description: >-
      Version of the software
    name: VERSION
    value: "2.13.1"
    required: true
  - description: >-
      Size of the Persistent Volumne in GB
    name: STORAGE_SIZE
    value: "15"
    required: true
  - description: >-
      Port you want your service to use
    displayName: Port
    name: PORT
    value: "8080"
    required: true


objects:


  - apiVersion: image.openshift.io/v1
    kind: ImageStream
    metadata:
      name: ${APP_NAME}


  - apiVersion: build.openshift.io/v1
    kind: BuildConfig
    metadata:
      name: ${APP_NAME}
    spec:
      failedBuildsHistoryLimit: 2
      output:
        to:
          kind: ImageStreamTag
          name: '${APP_NAME}:${VERSION}'
      postCommit: {}
      resources: {}
      runPolicy: Serial
      source:
        git:
          uri: ${SOURCE_CODE_REPOSITORY}
        sourceSecret:
          name: ***--frankfurt-webworker--tools--${APP_NAME}--deploy-token
        type: Git
      strategy:
        dockerStrategy:
          dockerfilePath: Dockerfile
          env:
            - name: VERSION
              value: ${VERSION}
            - name: STORAGE_SIZE
              value: ${STORAGE_SIZE}
        type: Docker
      successfulBuildsHistoryLimit: 2
      triggers: []


  - apiVersion: v1
    data:
      prometheus.yml: "# my global config\r\nglobal:\r\n  scrape_interval:     5s # Set the scrape interval to every 15 seconds. Default is every 1 minute.\r\n  evaluation_interval: 60s # Evaluate rules every 15 seconds. The default is every 1 minute.\r\n  # scrape_timeout is set to the global default (10s).\r\n\r\n# Alertmanager configuration\r\nalerting:\r\n  alertmanagers:\r\n  - static_configs:\r\n    - targets:\r\n      # - alertmanager:9093\r\n\r\n# Load rules once and periodically evaluate them according to the global 'evaluation_interval'.\r\nrule_files:\r\n  # - \"first_rules.yml\"\r\n  # - \"second_rules.yml\"\r\n\r\n# A scrape configuration containing exactly one endpoint to scrape:\r\n# Here it's Prometheus itself.\r\nscrape_configs:\r\n  # The job name is added as a label `job=<job_name>` to any timeseries scraped from this config.\r\n\r\n# https://labs.consol.de/development/2018/01/19/openshift_application_monitoring.html\r\n  - job_name: 'pods'\r\n    kubernetes_sd_configs:\r\n    - role: pod\r\n      namespaces:\r\n        names:\r\n        - ${NAMESPACE}\r\n\r\n    relabel_configs:\r\n    - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]\r\n      action: keep\r\n      regex: true\r\n    - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]\r\n      action: replace\r\n      target_label: __metrics_path__\r\n      regex: (.+)\r\n#    - source_labels: [__meta_kubernetes_pod_container_port_name]\r\n#      action: keep\r\n#      regex: metrics(-.*)?\r\n    - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]\r\n      action: replace\r\n      regex: ([^:]+)(?::\\d+)?;(\\d+)\r\n      replacement: $1:$2\r\n      target_label: __address__\r\n\r\n    - action: labelmap\r\n      regex: __meta_kubernetes_pod_label_(.+)\r\n    - source_labels: [__meta_kubernetes_namespace]\r\n      action: replace\r\n      target_label: namespace\r\n    - source_labels: [__meta_kubernetes_pod_name]\r\n      action: replace\r\n      target_label: name\r\n\r\n\r\n  - job_name: 'prometheus'\r\n\r\n    # metrics_path defaults to '/metrics'\r\n    # scheme defaults to 'http'.\r\n\r\n    static_configs:\r\n    - targets: ['localhost:9090']"
    kind: ConfigMap
    metadata:
      name: ${APP_NAME}-config


  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      name: ${APP_NAME}-storage
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: ${STORAGE_SIZE}Gi


  - apiVersion: apps.openshift.io/v1
    kind: DeploymentConfig
    metadata:
      name: ${APP_NAME}
    spec:
      replicas: 1
      revisionHistoryLimit: 10
      selector:
        app: ${APP_NAME}
        deploymentconfig: ${APP_NAME}
      strategy:
        activeDeadlineSeconds: 21600
        resources: {}
        rollingParams:
          intervalSeconds: 1
          maxSurge: 25%
          maxUnavailable: 25%
          timeoutSeconds: 600
          updatePeriodSeconds: 1
        type: Recreate
      template:
        metadata:
          labels:
            app: ${APP_NAME}
            deploymentconfig: ${APP_NAME}
        spec:
          containers:
            - image: >-
                docker-registry.default.svc:5000/${NAMESPACE}/${APP_NAME}:${VERSION}
              imagePullPolicy: Always
              name: ${APP_NAME}
              ports:
                - containerPort: ${{PORT}}
                  protocol: TCP
              resources:
                limits:
                  cpu: 300m
                  memory: 1024Mi
                requests:
                  cpu: 100m
                  memory: 512Mi
              terminationMessagePath: /dev/termination-log
              terminationMessagePolicy: File
              volumeMounts:
                - mountPath: /data
                  name: data
                - mountPath: /etc/prometheus/prometheus.yml
                  name: ${APP_NAME}-config
                  subPath: prometheus.yml
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          schedulerName: default-scheduler
          securityContext: {}
          terminationGracePeriodSeconds: 30
          volumes:
            - name: data
              persistentVolumeClaim:
                claimName: ${APP_NAME}-storage
            - configMap:
                defaultMode: 420
                items:
                  - key: prometheus.yml
                    path: prometheus.yml
                name: ${APP_NAME}-config
              name: ${APP_NAME}-config
      test: false
      triggers: []


  - apiVersion: v1
    kind: Service
    metadata:
      name: ${APP_NAME}
    spec:
      ports:
        - name: 443-${PORT}-tcp
          port: 443
          protocol: TCP
          targetPort: ${{PORT}}
      selector:
        app: ${APP_NAME}
        deploymentconfig: ${APP_NAME}
      sessionAffinity: None
      type: ClusterIP


  - apiVersion: route.openshift.io/v1
    kind: Route
    metadata:
      name: ${APP_NAME}
    spec:
      port:
        targetPort: 443-${PORT}-tcp
      tls:
        insecureEdgeTerminationPolicy: Redirect
        termination: edge
      to:
        kind: Service
        name: ${APP_NAME}
        weight: 100
      wildcardPolicy: None
